Linux安装Python3
步骤： 
1.下载
wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0a1.tar.xz
2. 解压
tar xvf  Python-3.6.0a1.tar.xz
3.编译安装
进入目录 ./configure --prefix=/usr/local
make && make install
4.测试
　输入 python3 

centos卸载python
rpm -qa|grep python|xargs rpm -e --allmatches --nodeps 		##强制删除已安装程序及其关联
whereis python |xargs rm -frv   ##删除所有残余文件 ##xargs，允许你对输出执行其他某些命令
查看是否删除：whereis python

卸载yum
rpm -qa|grep yum|xargs rpm -ev --allmatches --nodeps
whereis yum |xargs rm -frv

centos安装yum

rpm -ivh --nodeps https://soft.laozuo.org/iso/centos/x86_64/yum-plugin-fastestmirror-1.1.30-30.el6.noarch.rpm
rpm -ivh --nodeps https://soft.laozuo.org/iso/centos/x86_64/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm
rpm -ivh --nodeps https://soft.laozuo.org/iso/centos/x86_64/yum-3.2.29-69.el6.centos.noarch.rpm


wget http://mirrors.163.com/centos/7/os/i386/Packages/yum-3.2.29-60.el6.centos.noarch.rpm 
wget http://mirrors.163.com/centos/7/os/i386/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm  
wget http://mirrors.163.com/centos/7/os/i386/Packages/yum-plugin-fastestmirror-1.1.30-30.el6.noarch.rpm 
wget http://mirrors.163.com/centos/7/os/i386/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm

wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-3.4.3-150.el7.centos.noarch.rpm
wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-40.el7.noarch.rpm

rpm -ivh *.rpm --force --nodeps
--force  即使覆盖属于其它包的文件也强迫安装
--nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装。



----------------------------------------------------------------------------------------------------------------------------
Python2.0和Python3.0有很大的区别，这里是Python3.0。

1、第一个python程序
交互式编程：交互式编程不需要创建脚本文件，是通过Python解释器的交互模式进来编写代码。
在Windows上安装Python后，在cmd中输入python，输入 print ("hello python");  就会输出hello python


2、多行语句
Python语句中一般以新行作为为语句的结束符。
但是我们可以使用斜杠（ \）将一行的语句分为多行显示，如下所示：
total = item_one + \
        item_two + \
        item_three
语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：
days = ['Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday']
		
3、Python 引号
Python 可以使用引号( ' )、双引号( " )、三引号( ''' 或 """ ) 来表示字符串，引号的开始与结束必须的相同类型的。
其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。
word = 'word'
sentence = "这是一个句子。"
paragraph = """这是一个段落。
包含了多个语句"""

4、Python注释
python中单行注释采用 # 开头。
python 中多行注释使用三个单引号(''')或三个双引号(""")。


5、字符串
python中单引号和双引号使用完全相同。
使用三引号('''或""")可以指定一个多行字符串。
转义符 '\'
自然字符串， 通过在字符串前加r或R。 如 r"this is a line with \n" 则\n会显示，并不是换行。
python允许处理unicode字符串，加前缀u或U， 如 u"this is an unicode string"。
字符串是不可变的。
按字面意义级联字符串，如"this " "is " "string"会被自动转换为this is string。
word = '字符串'
sentence = "这是一个句子。"
paragraph = """这是一个段落，
可以由多行组成"""

6、import与 from.....import
在 python 用 import 或者 from...import 来导入相应的模块。
将整个模块(somemodule)导入，格式为： import somemodule
从某个模块中导入某个函数,格式为： from somemodule import somefunction
从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc
将某个模块中的全部函数导入，格式为： from somemodule import *

7、基本数据类型

多个变量赋值
a = b = c = 1		创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。

可以为多个对象指定多个变量。例如：a, b, c = 1, 2, "runoob"

8、标准数据类型
Python3 中有六个标准的数据类型：
	8.1 Number（数字）
	
	Python3 支持 int、float、bool、complex（复数）。
	在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。
	像大多数语言一样，数值类型的赋值和计算都是很直观的。
	内置的 type() 函数可以用来查询变量所指的对象类型。
	
	此外还可以用 isinstance 来判断：
	isinstance和type的区别：
		type() 不会认为子类是一种父类类型，不考虑继承关系。
		isinstance() 会认为子类是一种父类类型，考虑继承关系。
		如果要判断两个类型是否相同推荐使用 isinstance()。
----------------------------------------------------------------------------------------
	8.2 String（字符串）
	Python中的字符串用单引号(')或双引号(")括起来，同时使用反斜杠(\)转义特殊字符。
	
	字符串的截取的语法格式如下：
	变量[头下标:尾下标]
	索引值以 0 为开始值，-1 为从末尾的开始位置
	加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。
	
	#String 字符串
	str = 'Runoob'

	print(str)
	print(str[0:-1])	#输出第一个到 倒数第二个的所有字符
	print(str[0])
	print(str[2:5])
	print(str[2:])		#输出从第三个开始的后的所有的字符
	print(str * 2)		#输出字符串两次
	print(str + "fajfwojngbi af")	#连接字符串
	
	Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
----------------------------------------------------------------------------------------
	
	#转义字符
	Python 使用反斜杠(\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：
	只有有转义 特殊字符出现的时候才可用
	print('Ru\noob')
	print(r'Ru\noob')	
	反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 """...""" 或者 '''...''' 跨越多行。
----------------------------------------------------------------------------------------	
	8.3 List[列表]
	List（列表） 是 Python 中使用最频繁的数据类型。
	列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
	列表是写在方括号[]之间、用逗号分隔开的元素列表。
	和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
	列表截取的语法格式如下：
	变量[头下标:尾下标]
	索引值以 0 为开始值，-1 为从末尾的开始位置。
	加号（+）是列表连接运算符，星号（*）是重复操作
	
	list = ['abcd',	786, 3.21, 'runoob', 230.9]
	tinylist = [123, 'runoob']

	print(list, '\n',tinylist,'\n')
	print(list[0])
	print(list[-1])
	print(list[1:3])		# 输出从第三个元素开始的所有元素
	print(tinylist * 2)		# 输出两次列表
	print(list + tinylist)	# 连接列表
	
	1、List写在方括号之间，元素用逗号隔开。
	2、和字符串一样，list可以被索引和切片。
	3、List可以使用+操作符进行拼接。
	4、List中的元素是可以改变的。
--------------------------------------------------------------------------------------------------------
	8.4 Tuple（元组）
	元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号(())里，元素之间用逗号隔开。
	元组中的元素类型也可以不相同
	
	tuple = ('abcd', 786, 3.21, 'runoob', 230.9)
	tinytuple = (123, 'runoob')

	print(tuple, '\n',tinytuple,'\n')
	print(tuple[0])
	print(tuple[-1])
	print(tuple[1:3])		# 输出从第三个元素开始的所有元素
	print(tinytuple * 2)		# 输出两次元组
	print(tuple + tinytuple)	# 连接元组
	
	元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。
	
	注意：
	1、与字符串一样，元组的元素不能修改。
	2、元组也可以被索引和切片，方法一样。
	3、注意构造包含0或1个元素的元组的特殊语法规则。
	4、元组也可以使用+操作符进行拼接。
	
--------------------------------------------------------------------------------------------------------
	8.5 Set{集合}
	集合（set）是一个无序不重复元素的序列。
	基本功能是进行成员关系测试和删除重复元素。
	可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
	创建格式：
	parame = {value01,value02,...}
	或者
	set(value)
	
	
	
--------------------------------------------------------------------------------------------------------
	8.6 Dictionary{字典}
	
	字典（dictionary）是Python中另一个非常有用的内置数据类型。
	列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
	字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。
	键(key)必须使用不可变类型。
	在同一个字典中，键(key)必须是唯一的。

--------------------------------------------------------------------------------------------------------
9 Python运算符优先级
以下表格列出了从最高到最低优先级的所有运算符：
运算符				描述
**				指数 (最高优先级)
~ + -			按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
* / % //		乘，除，取模和取整除
+ -				加法减法
>> <<			右移，左移运算符
&				位 'AND'
^ |				位运算符
<= < > >=		比较运算符
<> == !=		等于运算符
= %= /= //= -= += *= **=	赋值运算符
is is not		身份运算符
in not in		成员运算符
not or and		逻辑运算符

--------------------------------------------------------------------------------------------------------
10、Python3 迭代器与生成器
迭代器
迭代是Python最强大的功能之一，是访问集合元素的一种方式。
迭代器是一个可以记住遍历的位置的对象。
迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。
迭代器有两个基本的方法：iter() 和 next()。
字符串，列表或元组对象都可用于创建迭代器：


生成器
在 Python 中，使用了 yield 的函数被称为生成器（generator）。
跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。
在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。
调用一个生成器函数，返回的是一个迭代器对象。


--------------------------------------------------------------------------------------------------------
11、Python3 函数
定义一个函数  def
你可以定义一个由自己想要功能的函数，以下是简单的规则：
函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。
任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。
函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
函数内容以冒号起始，并且缩进。
return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。

语法
Python 定义函数使用 def 关键字，一般格式如下：
def 函数名（参数列表）:
    函数体

--------------------------------------------------------------------------------------------------------
12、匿名函数
python 使用 lambda 来创建匿名函数。
所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。
lambda 只是一个表达式，函数体比 def 简单很多。
lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。
虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加
	运行效率。	
	
语法
lambda 函数的语法只包含一个语句，如下：
lambda [arg1 [,arg2,.....argn]]:expression
如下实例：
#!/usr/bin/python3
 
# 可写函数说明
sum = lambda arg1, arg2: arg1 + arg2;
 
# 调用sum函数
print ("相加后的值为 : ", sum( 10, 20 ))
print ("相加后的值为 : ", sum( 20, 20 ))	
	
--------------------------------------------------------------------------------------------------------
13、变量作用域
Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。
变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：
L （Local） 局部作用域
E （Enclosing） 闭包函数外的函数中
G （Global） 全局作用域
B （Built-in） 内建作用域
以 L –> E –> G –>B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。
x = int(2.9)  # 内建作用域
 
g_count = 0  # 全局作用域
def outer():
    o_count = 1  # 闭包函数外的函数中
    def inner():
        i_count = 2  # 局部作用域
Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这这些语句内定义的变量，外部也可以访问，如下代码：
>>> if True:
...  msg = 'I am from Runoob'
... 
>>> msg
'I am from Runoob'
>>> 
--------------------------------------------------------------------------------------------------------
14、global 和 nonlocal关键字
当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。
以下实例修改全局变量 num：
#!/usr/bin/python3

num = 1
def fun1():
    global num  # 需要使用 global 关键字声明
    print(num) 
    num = 123
    print(num)
fun1()
以上实例输出结果：
1
123



--------------------------------------------------------------------------------------------------------



from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

import sys

class MainWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # 设置窗口标题
        self.setWindowTitle('My First App')

        # 设置标签
        label = QLabel('Welcome to Shiyanlou!')
        # 设置标签显示在中央
        label.setAlignment(Qt.AlignCenter)
        self.setCentralWidget(label)

# 创建应用实例，通过 sys.argv 传入命令行参数
app = QApplication(sys.argv)
# 创建窗口实例
window = MainWindow()
# 显示窗口
window.show()
# 执行应用，进入事件循环
app.exec_()

--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




		